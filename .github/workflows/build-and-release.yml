name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-executable:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper version numbering
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Get version info
      id: version
      shell: powershell
      run: |
        $version = "3.0.0"
        $commit_count = git rev-list --count HEAD
        $short_sha = git rev-parse --short HEAD
        
        if ($env:GITHUB_REF -match "refs/tags/v(.+)") {
          $version = $matches[1]
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
        } else {
          $dev_version = "$version.dev$commit_count+$short_sha"
          echo "version=$dev_version" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
        }
        
        echo "Building version: $version"
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller retrochat.spec --clean --noconfirm
    
    - name: Test executable
      run: |
        .\dist\rchat.exe --help || echo "Executable created successfully"
    
    - name: Create artifacts directory
      run: |
        New-Item -ItemType Directory -Force -Path "artifacts"
        Copy-Item "dist\rchat.exe" -Destination "artifacts\rchat-${{ steps.version.outputs.version }}.exe"
        Copy-Item "config.example.json" -Destination "artifacts\"
        Copy-Item "README.md" -Destination "artifacts\"
        Copy-Item "LICENSE" -Destination "artifacts\"
    
    - name: Upload Windows Executable
      uses: actions/upload-artifact@v4
      with:
        name: retrochat-executable
        path: dist/rchat.exe

  build-package:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
    
    - name: Get version info
      id: version
      run: |
        version="3.0.0"
        commit_count=$(git rev-list --count HEAD)
        short_sha=$(git rev-parse --short HEAD)
        
        if [[ $GITHUB_REF =~ refs/tags/v(.+) ]]; then
          version="${BASH_REMATCH[1]}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          dev_version="$version.dev$commit_count+$short_sha"
          echo "version=$dev_version" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Building version: $version"
    
    - name: Create pyproject.toml
      run: |
        cat > pyproject.toml << 'EOF'
        [build-system]
        requires = ["setuptools>=45", "wheel", "setuptools_scm"]
        build-backend = "setuptools.build_meta"

        [project]
        name = "retrochat-cli"
        version = "${{ steps.version.outputs.version }}"
        description = "Multi-Provider AI Chat Application"
        readme = "README.md"
        license-files = ["LICENSE"]
        authors = [
            {name = "DefamationStation", email = "your-email@example.com"}
        ]
        classifiers = [
            "Development Status :: 4 - Beta",
            "Intended Audience :: Developers",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
            "Topic :: Communications :: Chat",
            "Topic :: Scientific/Engineering :: Artificial Intelligence",
        ]
        requires-python = ">=3.8"
        dependencies = [
            "requests>=2.25.0",
            "openai>=1.0.0",
        ]

        [project.urls]
        Homepage = "https://github.com/DefamationStation/retrochat-v3"
        Repository = "https://github.com/DefamationStation/retrochat-v3"
        Issues = "https://github.com/DefamationStation/retrochat-v3/issues"

        [project.scripts]
        rchat = "main:main"

        [tool.setuptools.packages.find]
        include = ["src*"]

        [tool.setuptools.package-data]
        "*" = ["*.json", "*.md", "LICENSE"]
        EOF
    
    - name: Build package
      run: |
        python -m build
    
    - name: Verify package
      run: |
        pip install twine
        twine check dist/*.whl dist/*.tar.gz
      shell: pwsh

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: retrochat-package-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 30

  create-release:
    needs: [build-executable, build-package]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version info
      id: version
      run: |
        version="3.0.0"
        commit_count=$(git rev-list --count HEAD)
        short_sha=$(git rev-parse --short HEAD)
        
        if [[ $GITHUB_REF =~ refs/tags/v(.+) ]]; then
          version="${BASH_REMATCH[1]}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
          echo "release_name=RetroChat v$version" >> $GITHUB_OUTPUT
        else
          dev_version="$version.dev$commit_count+$short_sha"
          echo "version=$dev_version" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "release_name=RetroChat Development Build ($short_sha)" >> $GITHUB_OUTPUT
        fi
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Get Package Version
      id: get_version
      run: |
        if [[ $GITHUB_REF =~ refs/tags/v(.+) ]]; then
          version="${BASH_REMATCH[1]}"
          echo "version=$version" >> $GITHUB_OUTPUT
        fi
    
    - name: List downloaded files
      run: ls -R dist

    - name: Rename Executable
      id: rename_exe
      run: |
        $file = Get-ChildItem -Path "dist/retrochat-executable/rchat.exe"
        $newName = "rchat-${{ steps.get_version.outputs.version }}.exe"
        Rename-Item -Path $file.FullName -NewName $newName
        echo "new_name=$newName" >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.is_release == 'true' && format('v{0}', steps.version.outputs.version) || format('dev-{0}', github.sha) }}
        name: ${{ steps.version.outputs.release_name }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ steps.version.outputs.is_release != 'true' }}
        files: |
          dist/pip-packages/*
          dist/retrochat-executable/${{ steps.rename_exe.outputs.new_name }}
        token: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Publish to PyPI on tagged releases
  publish-pypi:
    needs: [build-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Get version info
      id: version
      run: |
        if [[ $GITHUB_REF =~ refs/tags/v(.+) ]]; then
          version="${BASH_REMATCH[1]}"
          echo "version=$version" >> $GITHUB_OUTPUT
        fi
    
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: retrochat-package-${{ steps.version.outputs.version }}
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        # Remove the next line to publish to the real PyPI
        repository-url: https://test.pypi.org/legacy/  # Test PyPI first